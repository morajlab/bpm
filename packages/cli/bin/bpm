#!/usr/bin/env bash

# Define bash modules here
log=echo

GLOBAL_BASH_MODULES_PATH=$HOME/.bash_modules
declare -A PACKAGE_INFO_SCHEMA=(
  # ["KEY"]='(["type"]="<dict|array|string>" ["required"]=<false|true> ["valid_fn"]="<function_name>")'
  ["NAME"]='(["type"]="string" ["required"]=true ["valid_fn"]="__validate_package_name")'
  ["VERSION"]='(["type"]="string" ["required"]=true ["valid_fn"]="__validate_package_version")'
  ["DESCRIPTION"]='(["type"]="string" ["required"]=false ["valid_fn"]="__validate_package_description")'
  ["KEYWORDS"]='(["type"]="array" ["required"]=false ["valid_fn"]="__validate_package_keywords")'
  ["DEPENDENCIES"]='(["type"]="dict" ["required"]=false ["valid_fn"]="__validate_package_deps")'
  ["DEVDEPENDENCIES"]='(["type"]="dict" ["required"]=false ["valid_fn"]="__validate_package_devdeps")'
  ["LICENSE"]='(["type"]="string" ["required"]=false ["valid_fn"]="__validate_package_license")'
  ["AUTHOR"]='(["type"]="dict" ["required"]=false ["valid_fn"]="__validate_package_author")'
  ["REPOSITORY"]='(["type"]="string" ["required"]=false ["valid_fn"]="__validate_package_repository")'
  ["SOURCE"]='(["type"]="array" ["required"]=false ["valid_fn"]="__validate_package_source")'
  ["BIN"]='(["type"]="string" ["required"]=false ["valid_fn"]="__validate_package_bin")'
)

# Define functions at top of file

# Private functions
__find_bash_modules() {
  local root_path=
  local current_path=$(pwd)
  local is_root=false

  while ! $is_root; do
    if [ $current_path = / ]; then
      echo 1
      exit 1
    fi

    if [ -d "$current_path/bash_modules" ]; then
      root_path="$current_path/bash_modules"
      is_root=true
    fi

    current_path=$(dirname $current_path)
  done

  echo "$root_path"
}

__bash_module_installed() {
  if [ -z "$1" ] || \
     [ -z "$(ls -A $1/bin/ 2> /dev/null)" ]; then
    $log error "bash modules are not installed."
    exit 1
  fi

  if [ ! -z "$2" ] && [ ! -f "$1/bin/$2" ]; then
    $log error "module '$2' is not installed."
    exit 1
  fi
}

__normalize_package_info() {
  local package_info=${1//\[/\\\[}
  package_info=${package_info//\]/\\\]}

  echo "$package_info"
}

# Github REST-API
__gh_get_repo_content() {
  local repo="$1"
  local path="$2"
  local api_url="https://api.github.com/repos/$repo/contents/$path"
  local response=$(curl -s -w '#{"http_code": %{response_code}}#' $api_url)
  local content=$(echo "$response" | cut -d '#' -f 1)
  local code=$(echo "$response" | grep -Eoi "#\{(.+)\}#" | cut -d '#' -f 2 | jq '.http_code')

  echo "(['content']='$content' ['code']=$code)"
}

# Package info validator functions
__validate_package_name() {
  local REGEX='^([a-z0-9-~][a-z0-9-._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$'
  local match_result=$(echo $2 | grep -P -q $REGEX)

  if [[ $? != 0 ]]; then
    echo "Package name '$2' is invalid"
    exit 1
  fi
}

__validate_package_version() {
  local result=$($vv "$2")

  if [ "$result" != "0" ]; then
    echo "Version number '$2' is invalid"
    exit 1
  fi
}

__validate_package_description() {
  exit 0
}

__validate_package_keywords() {
  exit 0
}

__validate_package_deps() {
  declare -A deps
  local organization
  local repo
  local error_code=0

  eval "deps="${2#*=}

  for d in "${!deps[@]}"; do
    organization=$(echo $d | cut -d '/' -f 1)
    repo=$(echo $d | cut -d '/' -f 2)
    declare -A result="$(__gh_get_repo_content \
    $organization/bash-scripts packages/$repo/package.sh)"

    if [ "${result[code]}" != "200" ]; then
      echo "Bash module '$d' doesn't exist."
      error_code=1
    fi
  done

  exit $error_code
}

__validate_package_devdeps() {
  exit 0
}

__validate_package_license() {
  exit 0
}

__validate_package_author() {
  exit 0
}

__validate_package_repository() {
  exit 0
}

__validate_package_source() {
  local package="$3"
  local source_paths="$2"
  local error_code=0

  for p in ${source_paths[@]}; do
    declare -A result="$(__gh_get_repo_content \
    morajlab/bash-scripts packages/$package/$p)"

    if [ "${result[code]}" != "200" ]; then
      echo "Source path '$p' doesn't exist."
      error_code=1
    fi
  done

  exit $error_code
}

__validate_package_bin() {
  local bin_path="$2"

  if [ -z "$bin_path" ]; then
    exit 0
  fi

  local package="$3"
  local error_code=0
  declare -A result="$(__gh_get_repo_content \
  morajlab/bash-scripts packages/$package/$bin_path)"

  if [ "${result[code]}" != "200" ]; then
    echo "Bin path '$p' doesn't exist."
    error_code=1
  fi

  exit $error_code
}

__validate_package_info() {
  local package="$2"
  local errors=()

  eval "$1"

  for key in "${!PACKAGE_INFO_SCHEMA[@]}"; do
    declare -A schema_key_dict="${PACKAGE_INFO_SCHEMA[$key]}"
    local return_val=
    local value=

    case "${schema_key_dict[type]^^}" in
      "STRING")
        return_val=$("${schema_key_dict[valid_fn]}" \
        "${schema_key_dict[required]^^}" "${!key}" "$package")
      ;;
      "ARRAY")
        printf -v arrayeval 'value=$(echo "${%s[@]}")' "$key"
        eval "$arrayeval"
        return_val=$("${schema_key_dict[valid_fn]}" \
        "${schema_key_dict[required]^^}" "$value" "$package")
      ;;
      "DICT")
        declare -A tdict
        local dicteval=$(cat <<- 'EOF'
for i in "${%s[@]}"; do
  local _key=$(echo "$i" | cut -d '=' -f 1)
  local _value=$(echo "$i" | cut -d '=' -f 2)

  eval "tdict$_key=\"$_value\""
done
EOF
        )
        dicteval=${dicteval//\%s/"$key"}
        eval "$dicteval"
        return_val=$("${schema_key_dict[valid_fn]}" \
        "${schema_key_dict[required]^^}" "$(declare -p tdict)" "$package")
      ;;
    esac

    if [ ! -z "$return_val" ]; then
      errors+=("$return_val")
    fi
  done

  if [ ! -z "$errors" ]; then
    for e in "${errors[@]}"; do
      $log error "$e"
    done

    exit 1
  fi
}

# Public functions
install() {
  local bin_path=$(pwd)/bash_modules/bin
  local packages=()

  while [ "$#" -gt 0 ]; do
    case "${1^^}" in
      "--GLOBAL" | "-G")
        bin_path=$GLOBAL_BASH_MODULES_PATH/bin

        shift
      ;;
      *)
        packages+=("$1")

        shift
      ;;
    esac
  done

  mkdir -p $bin_path

  for p in "${packages[@]}"; do
    local package_sh_url="https://raw.githubusercontent.com/morajlab/bash-scripts/master/packages/$p/package.sh"

    if [ "$DEV" == "1" ]; then
      package_sh_url="http://0.0.0.0:8000/$p/package.sh"
    fi

    local package_info="$(curl -fsSL $package_sh_url 2> /dev/null)"

    if [ -z "$package_info" ]; then
      $log error "bash module '$p' doesn't exist."
      exit 1
    fi

    package_info=$(__normalize_package_info "$package_info")

    __validate_package_info "$package_info" "$p"

    # while IFS= read -r line; do
    #   echo $line
    # done < <(
    #   eval "$package_info"

    #   for key in "${!PACKAGE_INFO_SCHEMA[@]}"; do
    #     # echo "$key => " "${!key}"
    #     schema_key_dict="${PACKAGE_INFO_SCHEMA[$key]}"
    #     echo ${schema_key_dict["type"]}
    #   done
    # )

    # (
    #  curl -Lfs -o $bin_path/$p \
    #  https://raw.githubusercontent.com/morajlab/bash-scripts/master/packages/$p/bin/$p || \
    #  echo ">>> ERROR  :: bash module '$p' doesn't exist."
    # )
  done

  # chmod u+x $bin_path -R
}
i() {
  install "$@"
}

import() {
  local bash_modules_paths=()
  local local_bash_modules=$(__find_bash_modules)

  if [ "$local_bash_modules" != "1" ]; then
    bash_modules_paths+=("$local_bash_modules")
  fi

  bash_modules_paths+=("$GLOBAL_BASH_MODULES_PATH")

  for p in "${bash_modules_paths[@]}"; do
    if [ -f "$p/bin/$1" ]; then
      echo "bash $p/bin/$1"
      exit 0
    fi
  done

  echo "module '$1' is not installed."
  exit 1
}

list() {
  local bash_modules=

  while [ "$#" -gt 0 ]; do
    case "${1^^}" in
      "--GLOBAL" | "-G")
        bash_modules=$GLOBAL_BASH_MODULES_PATH

        shift
      ;;
      *)
        shift
      ;;
    esac
  done

  if [ -z "$bash_modules" ]; then
    local local_bash_modules=$(__find_bash_modules)

    if [ "$local_bash_modules" != "1" ]; then
      bash_modules=$local_bash_modules
    fi
  fi

  __bash_module_installed "$bash_modules"

  for p in $(ls -A $bash_modules/bin/); do
    echo "- $p"
  done
}
l() {
  list "$@"
}

uninstall() {
  local bash_modules=
  local interactive=0
  local module="$1"

  shift

  while [ "$#" -gt 0 ]; do
    case "${1^^}" in
      "--GLOBAL" | "-G")
        bash_modules=$GLOBAL_BASH_MODULES_PATH

        shift
      ;;
      "--YES" | "-Y")
        interactive=1

        shift
      ;;
      *)
        shift
      ;;
    esac
  done

  if [ -z "$bash_modules" ]; then
    local local_bash_modules=$(__find_bash_modules)

    if [ "$local_bash_modules" != "1" ]; then
      bash_modules=$local_bash_modules
    fi
  fi

  __bash_module_installed "$bash_modules" "$module"

  rm -rf $bash_modules/bin/$module

  $log success "module '$module' uninstalled."
}
u() {
  uninstall "$@"
}

# Import bash modules
_log=$(import log)

if [ "$?" != "0" ]; then
  $log ">>> $_log"
  exit 1
fi

log="$_log"

vv=$(import vv)

if [ "$?" != "0" ]; then
  $log error "$vv"
  exit 1
fi

if [[ $1 = __* ]] || [ "$(type -t $1)" != 'function' ]; then
  $log error "argument '$1' is invalid."
  exit 1
fi

FUNC_NAME=$1

shift

args=()

while [ "$#" -gt 0 ]; do
  case "${1^^}" in
    "--VERBOSE" | "-V")
      set -x

      shift
    ;;
    *)
      args+=("$1")

      shift
    ;;
  esac
done

$FUNC_NAME "${args[@]}"
